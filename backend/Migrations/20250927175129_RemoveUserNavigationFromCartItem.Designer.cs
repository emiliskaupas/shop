// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250927175129_RemoveUserNavigationFromCartItem")]
    partial class RemoveUserNavigationFromCartItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("backend.Models.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ProductId = 1L,
                            Quantity = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 2L,
                            ProductId = 2L,
                            Quantity = 2,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            ProductId = 4L,
                            Quantity = 1,
                            UserId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            ProductId = 3L,
                            Quantity = 1,
                            UserId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            ProductId = 5L,
                            Quantity = 1,
                            UserId = 3L
                        });
                });

            modelBuilder.Entity("backend.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ImageUrl = "https://example.com/iphone15pro.jpg",
                            Name = "iPhone 15 Pro",
                            Price = 999.99m,
                            ProductType = 0,
                            ShortDescription = "Latest iPhone with Pro features and titanium design."
                        },
                        new
                        {
                            Id = 2L,
                            ImageUrl = "https://example.com/nike-airmax.jpg",
                            Name = "Nike Air Max",
                            Price = 129.99m,
                            ProductType = 1,
                            ShortDescription = "Comfortable running shoes with Air Max technology."
                        },
                        new
                        {
                            Id = 3L,
                            ImageUrl = "https://example.com/macbook-pro.jpg",
                            Name = "MacBook Pro 14\"",
                            Price = 1999.99m,
                            ProductType = 0,
                            ShortDescription = "Powerful laptop with M3 chip for professional work."
                        },
                        new
                        {
                            Id = 4L,
                            ImageUrl = "https://example.com/levis-501.jpg",
                            Name = "Levi's 501 Jeans",
                            Price = 79.99m,
                            ProductType = 1,
                            ShortDescription = "Classic straight-fit jeans in premium denim."
                        },
                        new
                        {
                            Id = 5L,
                            ImageUrl = "https://example.com/samsung-tv.jpg",
                            Name = "Samsung 4K TV",
                            Price = 599.99m,
                            ProductType = 0,
                            ShortDescription = "55-inch 4K Smart TV with HDR and streaming apps."
                        });
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "admin@shop.com",
                            PasswordHash = "admin123",
                            Role = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "john.doe@example.com",
                            PasswordHash = "customer123",
                            Role = 0,
                            Username = "john_doe"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "jane.smith@example.com",
                            PasswordHash = "customer123",
                            Role = 0,
                            Username = "jane_smith"
                        });
                });

            modelBuilder.Entity("backend.Models.CartItem", b =>
                {
                    b.HasOne("backend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Models.User", null)
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
